{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/subscriptions.js","graphql/mutations.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","loading","error","form","name","description","reducer","state","action","type","note","value","App","useReducer","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listNotes","items","sort","b","console","useEffect","subscription","subscribe","next","noteData","onCreateNote","clientId","unsubscribe","styles","container","padding","input","marginBottom","item","textAlign","p","color","createNote","alert","completed","id","variables","log","updateNote","noteToUpdate","map","x","deleteNote","noteToDelete","filter","onChange","e","target","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3777eccb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport \n  React\n  , {\n      useEffect\n      , useReducer\n    } \nfrom 'react'\n\nimport { API } from 'aws-amplify'\nimport 'antd/dist/antd.css'\nimport { listNotes } from './graphql/queries'\nimport { v4 as uuid } from 'uuid'\nimport { \n  List\n  , Input\n  , Button \n} from 'antd';\n\nimport {\n  updateNote as UpdateNote\n  ,createNote as CreateNote\n  , deleteNote as DeleteNote \n} from './graphql/mutations';\nimport { PresetStatusColorTypes } from 'antd/lib/_util/colors';\nimport { onCreateNote } from './graphql/subscriptions'\n\nconst CLIENT_ID = uuid();\n\nconst initialState = {\n  notes: []\n  , loading: true\n  , error: false\n  , form: { \n      name: ''\n      , description: '' \n  }\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_NOTE':\n      return {\n        ...state \n        , notes: [\n          action.note  // adds a note to the top of the list\n          , ...state.notes\n        ]\n      };\n    case 'RESET_FORM':\n      return {\n        ...state\n        , form: initialState.form\n      };\n    case 'SET_INPUT':\n      return {\n        ...state\n        , form: {\n          ...state.form\n          , [action.name]: action.value\n        }\n      };\n    case 'SET_NOTES':\n      return { \n        ...state\n        , notes: action.notes\n        , loading: false \n      };\n    case 'ERROR':\n      return { \n        ...state\n        , loading: false\n        , error: true \n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n\nconst App = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchNotes = async() => {\n    try {\n      const notesData = await API.graphql({\n        query: listNotes\n      });\n      dispatch({\n        type: 'SET_NOTES'\n        , notes: notesData.data.listNotes.items.sort((a, b) => a.name < b.name ? -1 : 1) \n      });\n    } catch (err) {\n      console.error(err);\n      dispatch({\n        type: \"ERROR\"\n      });\n    }\n  };\n\n  useEffect(  //takes two params - a lambda and an empty array\n    () => {\n      fetchNotes();\n      const subscription = API.graphql(   // subscription does not return a promise\n        {\n          query: onCreateNote\n        }\n      ).subscribe( // function that takes an object. Object has a next property\n        {  \n          next: noteData => {  // next property is a lamda function that goes to multiple statements\n            const note = noteData.value.data.onCreateNote // get the note from the subscription payload\n            // how would you know what is all on noteData? console.log it!\n            if (CLIENT_ID === note.clientId) {\n              return; // bail if this instance of the app caused this subscription notification\n            }\n            dispatch({ //otherwise, update the state\n              type: 'ADD_NOTE'\n              , note \n            });\n        }\n      });\n      return () => subscription.unsubscribe(); // clean up\n    }\n    , []\n  );\n\n  const styles = {\n    container: {\n      padding: 20\n    }\n    , input: {\n      marginBottom: 10\n    }\n    , item: { \n      textAlign: 'left' \n    }\n    , p: { \n      color: '#1890ff' \n    }\n  }  \n\n  const renderItem = (item) => {\n    return (\n      <List.Item style={styles.item}\n      actions={[\n        <p \n          style={styles.p} \n          onClick={() => deleteNote(item)}\n        >\n          Delete\n        </p>,\n        <p \n        style={styles.p} \n        onClick={() => updateNote(item)}\n        >\n          {item.completed ? 'mark incomplete' : 'mark completed'}\n        </p>\n      ]}>\n\n      <List.Item.Meta\n        //title={item.name + (item.completed ? ' (completed)' : '')}\n        // tick string: evaluates as js expression\n        title={`${item.name} ${item.completed ? ' (completed)' : ''}`}\n        description={item.description}\n      />\n    </List.Item>\n          )\n        };\n\n  const createNote = async () => {\n    const { form } = state  // destructuring pulling form element out of state\n\n    if (!form.name || !form.description) {\n      return alert('please enter a name and description')\n    }\n\n    const note = { \n      ...form\n      , clientId: CLIENT_ID\n      , completed: false\n      , id: uuid() // generating id locally\n    }\n    \n    //optimistic dispatch, updates local app state before calling graphql\n    dispatch({ \n      type: 'ADD_NOTE'\n      , note // shorthand for note: note if property name and value are same, can short cut\n    });\n    \n    dispatch({ \n      type: 'RESET_FORM' \n    });\n    \n    try {\n      await API.graphql({\n        query: CreateNote,\n        variables: { input: note }\n      })\n      console.log('successfully created note!')\n    } catch (err) {\n      console.error(\"error: \", err)\n    }\n  };\n\n  const updateNote = async(noteToUpdate) => {\n    //update the state (optimistic)\n    dispatch({ \n      type: 'SET_NOTES'\n      , notes: state.notes.map(x => ({\n        ...x\n        , completed: x == noteToUpdate ? !x.completed : x.completed //ternary \n\n      }))  // map over each note and when i get to the one I want, switch the completed state.\n    });\n\n    // update the back end\n    try {\n      await API.graphql({\n        query: UpdateNote\n        , variables: { \n          input: { \n            id: noteToUpdate.id\n            , completed: !noteToUpdate.completed \n          } \n        }\n      })\n      console.log('note successfully updated!')\n    } catch (err) {\n      console.error('error: ', err)\n    }\n  };\n\n  const deleteNote = async(noteToDelete) => {\n    //optimistically update state with the note removed\n    // tom code:\n    dispatch({\n      type:\"SET_NOTES\"\n      , notes: state.notes.filter(x => x != noteToDelete)\n\n    });\n\n    // author code:\n    // const index = state.notes.findIndex(n => n.id === id)\n    // const notes = [\n    //   ...state.notes.slice(0, index),\n    //   ...state.notes.slice(index + 1)];\n    // dispatch({ type: 'SET_NOTES', notes })\n\n    //call the backend to make the change\n    try {\n      await API.graphql({\n        query: DeleteNote\n        , variables: { \n          input: {\n            id: noteToDelete.id \n          }\n        }\n      })\n      console.log('successfully deleted note!')\n      } catch (err) {\n        console.error(err)\n    }\n  };\n\n  const onChange = (e) => {\n    dispatch({\n      type: 'SET_INPUT'\n      , name: e.target.name\n      , value: e.target.value\n    });\n  };\n\n  return (\n    <div style={styles.container}>\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Enter note name\"\n        name='name'\n        style={styles.input}\n      />\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Enter note description\"\n        name='description'\n        style={styles.input}\n      />\n      <Button\n        onClick={createNote}\n        type=\"primary\"\n      >Create Note</Button>\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  )\n\n};\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://vv5u5xx2i5fcpfousixoftq3ny.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-3jb77baosjc7lhvzkny3yjdxva\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\n\nAmplify.configure(config)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}